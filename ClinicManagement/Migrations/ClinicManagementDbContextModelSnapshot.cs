// <auto-generated />
using System;
using ClinicManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicManagement.Migrations
{
    [DbContext(typeof(ClinicManagementDbContext))]
    partial class ClinicManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicManagement.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ee812d9-f114-4578-a5b2-017f806a24e8",
                            Email = "admin@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "123456@clinic*",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f4acbf7-65dd-4fc9-9ce5-ac9081a8b2e7",
                            TwoFactorEnabled = false,
                            UserName = "admin@gamil.com",
                            first_name = "Admin",
                            last_name = "User"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c91a2dd1-66cf-4fc0-8a26-9d108dd702d2",
                            Email = "admin2@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "123456@clinic*",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b57d5381-dfc7-42e8-95b3-821413d6fdbe",
                            TwoFactorEnabled = false,
                            UserName = "admin2@gamil.com",
                            first_name = "Admin2",
                            last_name = "User2"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57225d54-04a2-4cff-850b-d1eb26853b36",
                            Email = "admin3@gamil.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "123456@clinic*",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5a57784-c14f-4853-b27f-d62043111efc",
                            TwoFactorEnabled = false,
                            UserName = "admin3gamil.com",
                            first_name = "Admin3",
                            last_name = "User3"
                        });
                });

            modelBuilder.Entity("ClinicManagement.Models.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("appointmentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = "app1",
                            DoctorId = "doctor1",
                            PatientId = "patient1",
                            appointmentDate = "20040706",
                            comment = "comments",
                            status = "new"
                        },
                        new
                        {
                            Id = "app2",
                            DoctorId = "doctor2",
                            PatientId = "patient2",
                            appointmentDate = "20040706",
                            comment = "comments",
                            status = "new"
                        },
                        new
                        {
                            Id = "app3",
                            DoctorId = "doctor3",
                            PatientId = "patient3",
                            appointmentDate = "20040706",
                            comment = "comments",
                            status = "new"
                        });
                });

            modelBuilder.Entity("ClinicManagement.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = "doctor1",
                            UserId = "user1",
                            contact = "074 226 1505",
                            email = "hlongwaniab@gmail.com",
                            first_name = "Masingita",
                            last_name = "Hlongwani",
                            speciality = "Children"
                        },
                        new
                        {
                            Id = "doctor2",
                            UserId = "user2",
                            contact = "074 226 1505",
                            email = "abelmasingita9@gmail.com",
                            first_name = "Abel",
                            last_name = "Hlongwani",
                            speciality = "Teeth"
                        },
                        new
                        {
                            Id = "doctor3",
                            UserId = "user3",
                            contact = "074 226 1505",
                            email = "abelmasingita9@gmail.com",
                            first_name = "Moses",
                            last_name = "Hlongwani",
                            speciality = "Eyes"
                        });
                });

            modelBuilder.Entity("ClinicManagement.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = "patient1",
                            UserId = "user1",
                            contact = "074 226 1505",
                            dateOfBirth = "20010607",
                            email = "hlongwaniabb@gmail.com",
                            first_name = "Masingitas",
                            gender = "Male",
                            last_name = "Hlongwanii"
                        },
                        new
                        {
                            Id = "patient2",
                            UserId = "user2",
                            contact = "074 226 1505",
                            dateOfBirth = "20010607",
                            email = "abelmasingita9@gmail.com",
                            first_name = "Abel",
                            gender = "Male",
                            last_name = "Hlongwani"
                        },
                        new
                        {
                            Id = "patient3",
                            UserId = "user3",
                            contact = "074 226 1505",
                            dateOfBirth = "20010607",
                            email = "abelmasingita9@gmail.com",
                            first_name = "Moses",
                            gender = "Male",
                            last_name = "Hlongwani"
                        });
                });

            modelBuilder.Entity("ClinicManagement.Models.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppointmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paymentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = "payment1",
                            AppointmentId = "app1",
                            amount = 300.89999999999998,
                            method = "method",
                            paymentDate = "20010608",
                            status = "paid"
                        },
                        new
                        {
                            Id = "payment2",
                            AppointmentId = "app2",
                            amount = 400.89999999999998,
                            method = "method",
                            paymentDate = "20010608",
                            status = "paid"
                        },
                        new
                        {
                            Id = "payment3",
                            AppointmentId = "app3",
                            amount = 400.89999999999998,
                            method = "method",
                            paymentDate = "20010608",
                            status = "paid"
                        });
                });

            modelBuilder.Entity("ClinicManagement.Models.Prescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("medicine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prescriptiobDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");

                    b.HasData(
                        new
                        {
                            Id = "pre1",
                            DoctorId = "doctor1",
                            PatientId = "patient1",
                            dosage = "1 evening",
                            instructions = "prescription instructions",
                            medicine = "Flue medicine",
                            prescriptiobDate = "20030406"
                        },
                        new
                        {
                            Id = "pre2",
                            DoctorId = "doctor2",
                            PatientId = "patient2",
                            dosage = "2 evening",
                            instructions = "prescription instructions",
                            medicine = "Flue medicine",
                            prescriptiobDate = "20030406"
                        },
                        new
                        {
                            Id = "pre3",
                            DoctorId = "doctor3",
                            PatientId = "patient3",
                            dosage = "3 evening",
                            instructions = "prescription instructions",
                            medicine = "Flue medicine",
                            prescriptiobDate = "20030406"
                        });
                });

            modelBuilder.Entity("ClinicManagement.Models.Staff", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Staffs");

                    b.HasData(
                        new
                        {
                            Id = "staff1",
                            UserId = "user1",
                            contact = "074 226 1505",
                            email = "hlongwaniab@gmail.com",
                            first_name = "Masingitaaa",
                            last_name = "Hlongwani",
                            position = "Nurse"
                        },
                        new
                        {
                            Id = "staff2",
                            UserId = "user2",
                            contact = "074 226 1505",
                            email = "abelmasingita9@gmail.com",
                            first_name = "Abelll",
                            last_name = "Hlongwani",
                            position = "Nurse"
                        },
                        new
                        {
                            Id = "staff3",
                            UserId = "user3",
                            contact = "074 226 1505",
                            email = "abelmasingita9@gmail.com",
                            first_name = "Mosesss",
                            last_name = "Hlongwani",
                            position = "Nurse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "67fc0192-ddcf-49bb-a352-02effb48f108",
                            ConcurrencyStamp = "e63211bc-03cc-457e-8db1-7dbc2bc2ed26",
                            Name = "Administrater",
                            NormalizedName = "ADMINISTRATER"
                        },
                        new
                        {
                            Id = "4ac37b8b-348a-4d96-949c-23f47a884060",
                            ConcurrencyStamp = "94bd06a2-b2e7-484c-808e-ebb80a8c85ba",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "d29267b7-4f30-420b-bd72-dde14e6e770b",
                            ConcurrencyStamp = "2b850811-46af-441f-9cf5-8315bd453db4",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = "4b4c6ba3-3b5b-452a-812a-8229561959cb",
                            ConcurrencyStamp = "90a7f4bd-0727-4e53-94e3-1813fb771377",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "282e0084-99b3-4ce4-8c85-7e60d169d71b",
                            ConcurrencyStamp = "95d0d32c-a486-4f10-8239-fcc581d1c3d8",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Appointment", b =>
                {
                    b.HasOne("ClinicManagement.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManagement.Models.Doctor", b =>
                {
                    b.HasOne("ClinicManagement.Models.ApplicationUser", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("ClinicManagement.Models.Doctor", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicManagement.Models.Patient", b =>
                {
                    b.HasOne("ClinicManagement.Models.ApplicationUser", "User")
                        .WithOne("Patient")
                        .HasForeignKey("ClinicManagement.Models.Patient", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClinicManagement.Models.Payment", b =>
                {
                    b.HasOne("ClinicManagement.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("ClinicManagement.Models.Prescription", b =>
                {
                    b.HasOne("ClinicManagement.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManagement.Models.Staff", b =>
                {
                    b.HasOne("ClinicManagement.Models.ApplicationUser", "User")
                        .WithOne("Staff")
                        .HasForeignKey("ClinicManagement.Models.Staff", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ClinicManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ClinicManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ClinicManagement.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicManagement.Models.ApplicationUser", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
